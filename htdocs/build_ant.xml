<?xml version="1.0" encoding="UTF-8"?>
<project name="ActRessources" default="build">
    <!-- By default, we assume all tools to be on the $PATH -->
    <!-- Uncomment the following when the tools are in ${basedir}/vendor/bin -->
    <!-- <property name="toolsdir" value="${basedir}/vendor/bin/"/> -->

    <property name="toolsdir" value=""/>
    <property name="builddir" value="${basedir}/app/build"/>

    <property environment="test" />

    <target name="build-lightweight" depends="prepare,phpunit" description="Lightweight build" />
    <target name="build" depends="prepare,lint,phploc-ci,pdepend,phpmd-ci,phpcs-ci,phpcpd-ci,phpunit,phpdoc,phpcb" description="Complete build" />
    <target name="build-parallel" depends="prepare,lint,tools-parallel,phpunit,phpdoc" description=""/>

    <!-- ### Run tools in parallel -->
    <target name="tools-parallel" description="Run tools in parallel">
        <parallel threadCount="2">
            <sequential>
                <antcall target="pdepend"/>
                <antcall target="phpmd-ci"/>
            </sequential>
            <antcall target="phpcpd-ci"/>
            <antcall target="phpcs-ci"/>
            <antcall target="phploc-ci"/>
        </parallel>
    </target>

    <!-- ### Clean build folders and files -->
    <target name="clean" depends="symfony.clean" unless="clean.done" description="Cleanup build artifacts">
        <delete dir="${builddir}/api"/>
        <delete dir="${builddir}/code-browser"/>
        <delete dir="${builddir}/coverage"/>
        <delete dir="${builddir}/logs"/>
        <delete dir="${builddir}/pdepend"/>
        <delete dir="${builddir}/phpdox"/>
        <delete dir="${builddir}/docs/*"/>
        <property name="clean.done" value="true"/>
    </target>

    <!-- ### Clean Symfony folders and files -->
    <target name="symfony.clean" description="Cleans up Symfony data">
        <delete file="${basedir}/composer.phar" />
        <delete file="${basedir}/app/config/parameters.yml" />
        <delete dir="${basedir}/app/cache" />
        <delete dir="${basedir}/app/logs" />
    </target>

    <!-- ### Prepare folders for the build -->
    <target name="prepare" depends="clean, symfony.prepare" unless="prepare.done" description="Prepare for build">
        <mkdir dir="${builddir}/api"/>
        <mkdir dir="${builddir}/code-browser"/>
        <mkdir dir="${builddir}/coverage"/>
        <mkdir dir="${builddir}/logs"/>
        <mkdir dir="${builddir}/pdepend"/>
        <mkdir dir="${builddir}/phpdox"/>
        <mkdir dir="${builddir}/docs/*"/>
        <property name="prepare.done" value="true"/>
    </target>

    <!-- ### Prepare Symfony folders for the build -->
    <target name="symfony.prepare" depends="symfony.clean" description="Prepares Symfony data">
        <mkdir dir="${basedir}/app/cache" />
        <mkdir dir="${basedir}/app/logs" />
        <copy file="${basedir}/app/config/parameters_jenkins.yml" tofile="${basedir}/app/config/parameters.yml" />
        <exec executable="bash">
            <arg value="-c" />
            <arg value="curl -s http://getcomposer.org/installer | php" />
        </exec>
        <exec executable="php">
            <arg value="composer.phar" />
            <arg value="install" />
            <arg value="--no-scripts" />
            <arg value="--no-progress" />
            <arg value="--optimize-autoloader" />
        </exec>
        <exec executable="app/console">
            <arg value="assets:install" />
            <arg value="-n" />
            <arg value="--no-debug" />
            <arg value="web" />
        </exec>
        <exec executable="app/console">
            <arg value="assetic:dump" />
            <arg value="-n" />
            <arg value="--no-debug" />
        </exec>
    </target>

    <!-- ### Prepare Symfony folders for the build -->
    <target name="lint" description="Perform syntax check of sourcecode files">
        <apply executable="php" failonerror="true">
            <arg value="-l" />

            <fileset dir="${basedir}/app">
                <include name="**/*.php" />
                <exclude name="**/cache/**" />
            </fileset>

            <fileset dir="${basedir}/src">
                <include name="**/*.php" />
            </fileset>
        </apply>

        <apply executable="app/console" failonerror="true">
            <arg value="twig:lint" />
            <arg value="--env=test" />

            <fileset dir="${basedir}/app/Resources">
                <include name="**/*.twig" />
            </fileset>

            <fileset dir="${basedir}/src">
                <include name="**/*.twig" />
            </fileset>
        </apply>
    </target>

    <!-- ### Measure quality of code indices -->
    <target name="phploc" description="Measure project size using PHPLOC">
        <exec executable="${toolsdir}phploc">
            <arg value="--count-tests" />
            <arg path="${basedir}/src" />
        </exec>
    </target>

    <!-- ### Measure quality of code indices for C.I. -->
    <target name="phploc-ci" depends="prepare" description="Measure project size using PHPLOC. Intended for usage within a continuous integration environment.">
        <exec executable="${toolsdir}phploc">
            <arg value="--count-tests" />
            <arg value="--log-csv" />
            <arg path="${builddir}/logs/phploc.csv" />
            <arg value="--log-xml" />
            <arg path="${builddir}/logs/phploc.xml" />
            <arg path="${basedir}/src" />
        </exec>
    </target>

    <!-- ### Tool PHP_Depend -->
    <target name="pdepend" depends="prepare" description="Calculate software metrics using PHP_Depend">
        <exec executable="${toolsdir}pdepend">
            <arg value="--jdepend-xml=${builddir}/logs/jdepend.xml" />
            <arg value="--jdepend-chart=${builddir}/pdepend/dependencies.svg" />
            <arg value="--overview-pyramid=${builddir}/pdepend/overview-pyramid.svg" />
            <arg path="${basedir}/src" />
        </exec>
    </target>

    <!-- ### Tool PHPMD -->
    <target name="phpmd" description="Perform project mess detection using PHPMD and print human readable output. Intended for usage on the command line before committing.">
        <exec executable="${toolsdir}phpmd">
            <arg path="${basedir}/src" />
            <arg value="text" />
            <arg value="${builddir}/phpmd.xml" />
        </exec>
    </target>

    <!-- ### Tool PHPMD for C.I. -->
    <target name="phpmd-ci" depends="prepare" description="Perform project mess detection using PHPMD creating a log file for the continuous integration server">
        <exec executable="phpmd">
            <arg path="${basedir}/src" />
            <arg value="xml" />
            <arg value="${builddir}/phpmd.xml" />
            <arg value="--reportfile" />
            <arg value="${builddir}/logs/pmd.xml" />
        </exec>
    </target>

    <!-- ### Tool PHP_CodeSniffer -->
    <target name="phpcs" description="Find coding standard violations using PHP_CodeSniffer and print human readable output. Intended for usage on the command line before committing.">
        <exec executable="${toolsdir}phpcs">
            <arg value="--standard=Symfony2" />
            <arg path="${basedir}/src" />
        </exec>
    </target>

    <!-- ### Tool PHP_CodeSniffer for C.I. -->
    <target name="phpcs-ci" depends="prepare" description="Find coding standard violations using PHP_CodeSniffer creating a log file for the continuous integration server">
        <exec executable="${toolsdir}phpcs" output="/dev/null">
            <arg value="--report=checkstyle" />
            <arg value="--report-file=${builddir}/logs/checkstyle.xml" />
            <arg value="--standard=Symfony2" />
            <arg path="${basedir}/src" />
        </exec>
    </target>

    <!-- ### Tool PHPCPD -->
    <target name="phpcpd" description="Find duplicate code using PHPCPD">
        <exec executable="${toolsdir}phpcpd">
            <arg path="${basedir}/src" />
        </exec>
    </target>

    <!-- ### Tool PHPCPD for C.I. -->
    <target name="phpcpd-ci" depends="prepare" description="Find duplicate code using PHPCPD and log result in XML format. Intended for usage within a continuous integration environment.">
        <exec executable="${toolsdir}phpcpd">
            <arg value="--log-pmd" />
            <arg value="${builddir}/logs/pmd-cpd.xml" />
            <arg path="${basedir}/src" />
        </exec>
    </target>

    <!-- ### Tool phpDox -->
    <target name="phpdoc" description="Generate API documentation using phpDox">
        <exec executable="phpdoc">
            <arg line="-d '${basedir}/src' -t '${builddir}/docs' --title='Tempo' " />
        </exec>
    </target>

    <!-- ### Throw tests -->
    <target name="phpunit" description="Run unit tests with PHPUnit">
        <exec executable="phpunit" failonerror="true">
            <arg value="-c" />
            <arg path="${basedir}/app/phpunit.xml" />
            <arg path="${basedir}/src" />
        </exec>
    </target>

    <!-- ### Tool PHP_CodeBrowser -->
    <target name="phpcb" description="Aggregate tool output with PHP_CodeBrowser">
        <exec executable="phpcb">
            <arg value="--log" />
            <arg path="${builddir}/logs" />
            <arg value="--source" />
            <arg path="${basedir}/src" />
            <arg value="--output" />
            <arg path="${builddir}/code-browser" />
        </exec>
    </target>
</project>